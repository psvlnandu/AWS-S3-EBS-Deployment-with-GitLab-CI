stages:
  - build
  - package
  - test
  - deploy

variables:
  APP_VERSION: $CI_PIPELINE_IID

build_website:
  image: node:22-alpine3.21
  stage: build
  script: 
    - yarn install 
    - yarn lint
    - yarn test
    - yarn build
    - echo $APP_VERSION > build/version.html
  # artifacts saves the build directory. 
  # These saved ae passed to subsequent jobs in later stages
  artifacts:
    paths:
      - build

build docker image:
  stage: package
  image: docker:20.10.12 #Tells GitLab to run your job inside a docker container:20.10.12
  services:
    - docker:20.10.12-dind 
    #Starts up a separate service container that runs the actual Docker engine(daemon). 
    #This allows the main job container to connect to it & build images
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin #Enter your password via standard input.
  # this docker client is able to talk to docker deamon.
  # This looks for Dockerfile in project & builds a docker image
    - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION .
    - docker image ls #lists all the docker images available
    - docker push --all-tags $CI_REGISTRY_IMAGE # --all-tags Pushing the Image to GitLab Private Registry.

test docker image:
  stage: test
  image: curlimages/curl 
  services:
    - name: $CI_REGISTRY_IMAGE:$APP_VERSION
      alias: website
  script:
    curl http://website/version.html | grep $APP_VERSION

deploy to production:
  image: 
    name: amazon/aws-cli:2.27.48
    entrypoint: [""]
  stage: deploy
  environment: Production
  variables:
    APP_NAME : Basic Website
    APP_ENV_NAME : BasicWebsite-env
  script:
    - aws --version
    - yum install -y gettext
    - export DEPLOY_TOKEN=$(echo $GITLAB_DEPLOY_TOKEN | tr -d "\n" | base64) #AWS expects base 64
    - envsubst < templates/Dockerrun.aws.json > Dockerrun.aws.json
    - envsubst < templates/auth.json > auth.json
    - cat Dockerrun.aws.json
    - cat auth.json
    - aws s3 cp Dockerrun.aws.json s3://$AWS_S3_BUCKET/Dockerrun.aws.json
    - aws s3 cp auth.json s3://$AWS_S3_BUCKET/auth.json
    - echo "Checking AWS CLI effective region..."
    - aws configure list 
    - aws elasticbeanstalk create-application-version --region us-east-1 --application-name "$APP_NAME" --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=Dockerrun.aws.json
    # - aws elasticbeanstalk create-application-version --application-name "$APP_NAME" --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=Dockerrun.aws.json
    # - aws elasticbeanstalk update-environment --application-name "$APP_NAME" --version-label $APP_VERSION --environment-name $APP_ENV_NAME
    - aws elasticbeanstalk update-environment --region us-east-1 --application-name "$APP_NAME" --version-label $APP_VERSION --environment-name $APP_ENV_NAME